# this chunk contains code that sets global options for the entire .Rmd.
# we use include=FALSE to suppress it from the top of the document, but it will still appear in the appendix.
knitr::opts_chunk$set(echo = FALSE) # actually set the global chunk options.
# we set echo=FALSE to suppress code such that it by default does not appear throughout the document.
# note: this is different from .Rmd default
pivot_try_1 <- iris_tibble %>%
pivot_longer(c("Sepal.Length","Petal.Length"),names_to = "Parts", values_to ="Length")
library(datasets)
library(tibble) #loading package
library(dplyr) #for filter, group_by, summarise and mutate functions
data("iris") #Reading data
head(iris) # Reviewing dataset
sum(iris$Species=="setosa")
iris_tibble = as_tibble(iris) #Converting dataframe to tibble
pivot_try_1 <- iris_tibble %>%
pivot_longer(c("Sepal.Length","Petal.Length"),names_to = "Parts", values_to ="Length")
pivot_try_1 <- iris_tibble %>%
pivot_longer (c("Sepal.Length","Petal.Length"),names_to = "Parts", values_to ="Length")
pivot_try_1 <- iris_tibble %>%
pivot_longer (c("Sepal.Length","Petal.Length"),names_to = "Parts", values_to ="Length")
# this chunk contains code that sets global options for the entire .Rmd.
# we use include=FALSE to suppress it from the top of the document, but it will still appear in the appendix.
knitr::opts_chunk$set(echo = FALSE) # actually set the global chunk options.
# we set echo=FALSE to suppress code such that it by default does not appear throughout the document.
# note: this is different from .Rmd default
colnames(iris)
iris_tidy <- iris_tibble %>%
pivot_longer(c("Sepal.Length","Petal.Length"), names_to="Parts", values_to="Length")
library(datasets)
library(tibble) #loading package
library(dplyr) #for filter, group_by, summarise and mutate functions
data("iris") #Reading data
head(iris) # Reviewing dataset
iris_tibble = as_tibble(iris) #Converting dataframe to tibble
colnames(iris)
iris_tidy <- iris_tibble %>%
pivot_longer(c("Sepal.Length","Petal.Length"), names_to="Parts", values_to="Length")
iris_tidy <- iris_tibble %>%
pivot_longer(c("Sepal.Length","Petal.Length"), names_to="Parts", values_to="Length")
#Tidying Data
iris_tidy <- iris_tibble %>%
pivot_wider(c("Sepal.Length","Petal.Length"), names_to="Parts", values_to="Length")
# this chunk contains code that sets global options for the entire .Rmd.
# we use include=FALSE to suppress it from the top of the document, but it will still appear in the appendix.
knitr::opts_chunk$set(echo = FALSE) # actually set the global chunk options.
# we set echo=FALSE to suppress code such that it by default does not appear throughout the document.
# note: this is different from .Rmd default
try_1= iris_tibble %>%
pivot_longer(c("Petals.Length","Petals.Width","Sepal.Length","Sepal.Width"), names_to= "Parts", values_to="Dimensions")
options(max.print = 100, width = 10000) #To print all columns
library(datasets)
library(tibble) #loading package
library(dplyr) #for filter, group_by, summarise and mutate functions
data("iris") #Reading data
head(iris) # Reviewing dataset
iris_tibble = as_tibble(iris) #Converting dataframe to tibble
try_1 <- iris_tibble %>%
pivot_longer(c("Petals.Length","Petals.Width","Sepal.Length","Sepal.Width"), names_to= "Parts", values_to="Dimensions")
try_1 <- iris_tibble %>%pivot_longer(c("Petals.Length","Petals.Width","Sepal.Length","Sepal.Width"), names_to= "Parts", values_to="Dimensions")
try_1 <- iris_tibble %>% pivot_wider(c("Petals.Length","Petals.Width","Sepal.Length","Sepal.Width"), names_to= "Parts", values_to="Dimensions")
colnames(iris_tibble)
try_1 <- iris_tibble %>% pivot_wider(c("Petal.Length","Petal.Width","Sepal.Length","Sepal.Width"), names_to= "Parts", values_to="Dimensions")
try_1 <- iris_tibble %>% pivot_longer(c("Petal.Length","Petal.Width","Sepal.Length","Sepal.Width"), names_to= "Parts", values_to="Dimensions")
library(tidyverse)
try_1 <- iris_tibble %>% pivot_longer(c("Petal.Length","Petal.Width","Sepal.Length","Sepal.Width"), names_to= "Parts", values_to="Dimensions")
try_1
try_1 <- iris_tibble %>% pivot_longer(c("Petal.Length""Sepal.Length"), names_to= "Parts", values_to="Dimensions")
try_1 <- iris_tibble %>% pivot_longer(c("Petal.Length","Sepal.Length"), names_to= "Parts", values_to="Dimensions")
try_1
try_2 <- try_1 %>%
pivot longer(c("Sepal.Width","Petal.Width"), names_to="Type_Width", values_to -"Width")
try_2 <- try_1 %>%
pivot_longer(c("Sepal.Width","Petal.Width"), names_to="Type_Width", values_to -"Width")
try_2 <- try_1 %>%
pivot_longer(c("Petal.Width","Sepal.Width"), names_to="Type_Width", values_to="Width")
try_2
iris_tidy <- iris_tibble %>% pivot_longer(c("Petal.Length","Sepal.Length","Petal.Width","Sepal.Width"), names_to= "Part_Dimenstions", values_to="Values")
iris_tidy
iris
setosa_longest_sepal<- iris_tidy %>%
filter(Species == "setosa") %>%
filter(Sepal.Length == max(Sepal.Length, na.rm= TRUE))
# Using piping operator to find Iris flower of Setosa type with longest sepal
setosa_longest_sepal<- iris_tidy %>%
filter(Species == "setosa") %>%
filter(Part_Dimenstions == max(Sepal.Length, na.rm= TRUE))
# Using piping operator to find Iris flower of Setosa type with longest sepal
setosa_longest_sepal<- iris_tidy %>%
filter(Species == "setosa") %>%
filter(Part_Dimenstions == "Sepal.Length") %>%
filter(Sepal.Length== max(Sepal.Length, na.rm= TRUE))
# Using piping operator to find Iris flower of Setosa type with longest sepal
setosa_longest_sepal<- iris_tidy %>%
filter(Species == "setosa") %>%
filter(Part_Dimenstions == "Sepal.Length") %>%
filter("Sepal.Length" == max("Sepal.Length", na.rm= TRUE))
setosa_longest_sepal
# Using piping operator to find Iris flower of Setosa type with longest sepal
setosa_longest_sepal<- iris_tidy %>%
filter(Species == "setosa") %>%
filter(Part_Dimenstions == "Sepal.Length") %>%
filter("Sepal.Length" == max ("Sepal.Length", na.rm= TRUE))
setosa_longest_sepal
# Using piping operator to find Iris flower of Setosa type with longest sepal
setosa_longest_sepal<- iris_tidy %>%
filter(Species == "setosa") %>%
filter(Part_Dimenstions == "Sepal.Length") %>%
filter(Values == max (Values, na.rm= TRUE))
setosa_longest_sepal
species_avg <- iris_tidy %>% group_by(Species) %>%
summarise(avg_petal_length=mean(Petal.Length),
avg_sepal_length=mean(Sepal.Length),
avg_petal_width =mean(Petal.Width),
avg_sepal_width = mean(Sepal.Width))
species_avg <- iris_tidy %>% group_by(Species) %>%
summarise(avg_petal_length=mean(Values[Part_Dimenstions == "Petal.Length"]),
avg_sepal_length=mean(Values[Part_Dimenstions == "Sepal.Length"]),
avg_petal_width =mean(Values[Part_Dimenstions == "Petal.Width"]),
avg_sepal_width = mean(Values[Part_Dimenstions == "Sepal.Length"])
species_avg
species_avg <- iris_tidy %>% group_by(Species) %>%
summarise(avg_petal_length=mean(Values[Part_Dimenstions == "Petal.Length"]),
avg_sepal_length=mean(Values[Part_Dimenstions == "Sepal.Length"]),
avg_petal_width =mean(Values[Part_Dimenstions == "Petal.Width"]),
avg_sepal_width = mean(Values[Part_Dimenstions == "Sepal.Length"]))
species_avg
avg_total_length_width= species_avg %>%
mutate(avg_total_length= avg_petal_length + avg_sepal_length, avg_total_width= avg_petal_width + avg_sepal_width)
avg_total_length_width
options(max.print = 100, width = 10000) #To print all columns
library(datasets)
library(tibble) #loading package
library(dplyr) #for filter, group_by, summarise and mutate functions
options(max.print = 10000, width = 10000) #To print all columns
library(datasets)
library(tibble) #loading package
library(dplyr) #for filter, group_by, summarise and mutate functions
data("iris") #Reading data
head(iris) # Reviewing dataset
iris_tibble = as_tibble(iris) #Converting dataframe to tibble
iris_tidy <- iris_tibble %>% pivot_longer(c("Petal.Length","Sepal.Length","Petal.Width","Sepal.Width"), names_to= "Part_Dimenstions", values_to="Values")
# Using piping operator to find Iris flower of Setosa type with longest sepal
setosa_longest_sepal<- iris_tidy %>%
filter(Species == "setosa") %>%
filter(Part_Dimenstions == "Sepal.Length") %>%
filter(Values == max (Values, na.rm= TRUE))
setosa_longest_sepal #Printing Setosa type with longest sepal
# Group_by and Summarise to determine the averages of petal and sepal length and width across various species of Iris flowers.
species_avg <- iris_tidy %>% group_by(Species) %>%
summarise(avg_petal_length=mean(Values[Part_Dimenstions == "Petal.Length"]),
avg_sepal_length=mean(Values[Part_Dimenstions == "Sepal.Length"]),
avg_petal_width =mean(Values[Part_Dimenstions == "Petal.Width"]),
avg_sepal_width = mean(Values[Part_Dimenstions == "Sepal.Length"]))
species_avg #averages of petal and sepal length and width across various species of Iris flowers
#Transformation of numeric variable after having called summarise
#With the help of mutate function, I added new column measuring the average total height and average total width across various species of Iris flowers. Total is calculated by adding sepal and petal's dimensions for respective species.
avg_total_length_width= species_avg %>%
mutate(avg_total_length= avg_petal_length + avg_sepal_length, avg_total_width= avg_petal_width + avg_sepal_width)
avg_total_length_width #adds the average total height and average total width across various species of Iris flowers to tibble
